#!/bin/bash

# Get the directory containing the script
MIMIR_HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
SCRIPTS_DIR="$MIMIR_HOME/scripts"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Function for error messages
error() {
    echo -e "${RED}ERROR: $1${NC}" >&2
    exit 1
}

# Function for verbose logging
log() {
    if [ $VERBOSE -eq 1 ]; then
        echo -e "${BLUE}[DEBUG] $1${NC}"
    fi
}

# Function to check if docker container is running
is_container_running() {
    local container_name=$1
    docker ps --format '{{.Names}}' | grep -q "^$container_name$"
}

# Function to check if required containers are running
check_required_containers() {
    local required_containers=("$@")
    local missing_containers=()
    
    for container in "${required_containers[@]}"; do
        if ! is_container_running "$container"; then
            missing_containers+=("$container")
        fi
    done
    
    if [ ${#missing_containers[@]} -ne 0 ]; then
        echo -e "${RED}ERROR: The following required containers are not running:${NC}"
        printf '%s\n' "${missing_containers[@]}"
        return 1
    fi
    
    return 0
}

# Command functions
cmd_status() {
    local container_name="voi-follower-node"
    
    # Check if container is running
    if ! is_container_running "$container_name"; then
        error "Container $container_name is not running"
    fi

    echo -e "${BLUE}${BOLD}Checking Voi Node Status...${NC}"
    echo "================================"

    # Run goal node status inside the container
    if ! docker exec -it "$container_name" /node/bin/goal -d /algod/data node status; then
        error "Failed to get node status"
    fi
}

cmd_start() {
    echo -e "${BLUE}${BOLD}Starting Mimir services...${NC}"
    
    cd "$MIMIR_HOME" || error "Failed to change to Mimir home directory"

    # Start Supabase first
    echo -e "${YELLOW}Starting Supabase services...${NC}"
    if [ -d "supabase/docker" ]; then
        (cd supabase/docker && docker compose up -d) || error "Failed to start Supabase services"
    else
        error "Supabase docker directory not found. Have you run 'mimir init'?"
    fi
    
    # Wait a moment for networks to be created
    echo -e "${YELLOW}Waiting for services to initialize...${NC}"
    sleep 3
    
    # Now start Mimir services
    echo -e "${YELLOW}Starting Mimir services...${NC}"
    docker compose up -d || error "Failed to start Mimir services"
    
    echo -e "${GREEN}All services started successfully!${NC}"
}

cmd_stop() {
    echo -e "${BLUE}${BOLD}Stopping Mimir services...${NC}"
    
    cd "$MIMIR_HOME" || error "Failed to change to Mimir home directory"

    # Stop Mimir services first
    echo -e "${YELLOW}Stopping Mimir services...${NC}"
    docker compose down || error "Failed to stop Mimir services"
    
    # Then stop Supabase
    echo -e "${YELLOW}Stopping Supabase services...${NC}"
    if [ -d "supabase/docker" ]; then
        (cd supabase/docker && docker compose down) || error "Failed to stop Supabase services"
    else
        echo -e "${YELLOW}Supabase docker directory not found, skipping...${NC}"
    fi
    
    echo -e "${GREEN}All services stopped successfully!${NC}"
}

cmd_init() {
    # Parse flags for init command
    VERBOSE=0
    while getopts ":v" opt; do
        case $opt in
            v)
                VERBOSE=1
                ;;
            \?)
                error "Invalid option: -$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Run the initialization script
    cd "$MIMIR_HOME" || error "Failed to change to Mimir home directory"
    if ! "$SCRIPTS_DIR/init.sh" $([ $VERBOSE -eq 1 ] && echo "-v"); then
        error "Initialization failed"
    fi
}

cmd_reset() {
    # Parse flags for reset command
    VERBOSE=0
    FORCE=0
    while getopts ":vf" opt; do
        case $opt in
            v)
                VERBOSE=1
                ARGS="$ARGS -v"
                ;;
            f)
                FORCE=1
                ARGS="$ARGS -f"
                ;;
            \?)
                error "Invalid option: -$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))

    # Run the reset script with collected args
    cd "$MIMIR_HOME" || error "Failed to change to Mimir home directory"
    if ! "$SCRIPTS_DIR/reset-mimir-environment.sh" $ARGS; then
        error "Reset failed"
    fi
}

cmd_backup() {
    # Parse flags for backup command
    VERBOSE=0
    while getopts ":v" opt; do
        case $opt in
            v)
                VERBOSE=1
                ;;
            \?)
                error "Invalid option: -$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))

    echo -e "${BLUE}${BOLD}Creating Mimir database backup...${NC}"
    
    # Check for required containers
    required_containers=(
        "supabase-db"
        "supabase-storage"
        "supabase-kong"
        "supabase-pooler"
    )
    
    if ! check_required_containers "${required_containers[@]}"; then
        error "Required Supabase services are not running. Please start Mimir services first."
    fi
    
    cd "$MIMIR_HOME" || error "Failed to change to Mimir home directory"
    if ! "$SCRIPTS_DIR/backup.sh" $([ $VERBOSE -eq 1 ] && echo "-v"); then
        error "Backup failed"
    fi
}

# Function to show usage
show_usage() {
    echo -e "${BOLD}Mimir - Voi Network Indexer Management Tool${NC}"
    echo
    echo "Usage: mimir COMMAND [OPTIONS]"
    echo
    echo "Commands:"
    echo "  init        Initialize or reinitialize the Mimir environment"
    echo "  start       Start all services (Supabase and Mimir)"
    echo "  stop        Stop all services"
    echo "  reset       Reset the Mimir environment (requires confirmation)"
    echo "  status      Check the status of the Voi node"
    echo "  backup      Create a database backup and store it in Supabase storage"
    echo "  help        Show this help message"
    echo
    echo "Options:"
    echo "  init:"
    echo "    -v        Verbose mode"
    echo
    echo "  reset:"
    echo "    -v        Verbose mode"
    echo "    -f        Force reset (skip confirmation)"
    echo
    echo "  backup:"
    echo "    -v        Verbose mode"
    echo
}

# Main command processing
case "$1" in
    init)
        shift
        cmd_init "$@"
        ;;
    start)
        cmd_start
        ;;
    stop)
        cmd_stop
        ;;
    reset)
        shift
        cmd_reset "$@"
        ;;
    status)
        cmd_status
        ;;
    backup)
        shift
        cmd_backup "$@"
        ;;
    help|--help|-h)
        show_usage
        ;;
    "")
        show_usage
        exit 1
        ;;
    *)
        error "Unknown command: $1"
        ;;
esac